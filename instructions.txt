#!/usr/bin/env python3
"""
HorsePredictor ‚Äì drag-and-drop race PDF ‚Üí 1st-place probabilities
Author: you + KimiK2
"""
import base64
import io
import json
import re
import time
import uuid
from pathlib import Path

import fitz  # PyMuPDF
import pandas as pd
import requests
import streamlit as st
from bs4 import BeautifulSoup

# ------------------------------------------------------------------
# CONFIG
# ------------------------------------------------------------------
MOONSHOT_COOKIE = "PASTE_YOUR___Host-session_HERE"
KIMI_UPLOAD    = "https://kimi.moonshot.cn/api/file"
KIMI_CHAT      = "https://kimi.moonshot.cn/api/chat"
SYSTEM_PROMPT  = (
    "You are an expert horse-racing analyst. "
    "Extract every runner from the PDF and return **only** a JSON list like:\n"
    '[{"horse":"Name","weight":53,"jockey":"J.Doe","last3":"1-2-3","prob":0.25},...]\n'
    'Where "prob" is your estimated probability (0-1) that this horse wins the race. '
    "Be concise ‚Äì no extra text outside the JSON."
)

# ------------------------------------------------------------------
# UTILS
# ------------------------------------------------------------------
@st.cache_data(show_spinner=False)
def pdf_to_images(pdf_bytes):
    """Return list of PNG bytes (page 1 only to save tokens)."""
    doc = fitz.open(stream=pdf_bytes, filetype="pdf")
    page = doc.load_page(0)
    pix = page.get_pixmap(dpi=150)
    img_bytes = pix.tobytes("png")
    doc.close()
    return [img_bytes]

def upload_to_kimi(img_bytes):
    """Upload image ‚Üí file_id."""
    files = {"file": ("page.png", img_bytes, "image/png")}
    headers = {"cookie": f"__Host-session={MOONSHOT_COOKIE}"}
    r = requests.post(KIMI_UPLOAD, files=files, headers=headers, timeout=30)
    r.raise_for_status()
    return r.json()["id"]

def ask_kimi(file_id):
    """Send file_id + prompt ‚Üí JSON answer."""
    headers = {
        "cookie": f"__Host-session={MOONSHOT_COOKIE}",
        "content-type": "application/json",
    }
    payload = {
        "messages": [
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user",   "content": [{"type": "file", "file_id": file_id}]},
        ],
        "ref_file_ids": [file_id],
        "use_search": False,
    }
    r = requests.post(KIMI_CHAT, json=payload, headers=headers, timeout=60)
    r.raise_for_status()
    # Moonshot returns SSE-style chunks; we take the last one
    lines = r.text.strip().splitlines()
    final = json.loads(lines[-1].replace("data: ", ""))
    return final["content"].strip()

def parse_kimi_json(raw: str):
    """Extract JSON list from Kimi reply."""
    m = re.search(r"\[.*\]", raw, flags=re.DOTALL)
    if not m:
        raise ValueError("No JSON array found in Kimi answer")
    return json.loads(m.group(0))

# ------------------------------------------------------------------
# STREAMLIT UI
# ------------------------------------------------------------------
st.set_page_config(page_title="HorsePredictor", layout="centered")
st.title("üêé HorsePredictor ‚Äì 1st-place probabilities")
st.markdown("Upload a race-program PDF and get an instant ranked table.")

uploaded = st.file_uploader("Choose PDF", type="pdf")
if uploaded:
    with st.spinner("Reading PDF‚Ä¶"):
        imgs = pdf_to_images(uploaded.read())
    with st.spinner("Talking to KimiK2‚Ä¶"):
        fid  = upload_to_kimi(imgs[0])
        reply = ask_kimi(fid)
        data  = parse_kimi_json(reply)
    df = pd.DataFrame(data)
    df = df.sort_values("prob", ascending=False).reset_index(drop=True)
    df["prob_pct"] = (df["prob"] * 100).round(1)
    df["rank"] = df.index + 1

    st.success("Analysis complete!")
    st.dataframe(df[["rank","horse","jockey","weight","last3","prob_pct"]], use_container_width=True)

    top = df.iloc[0]
    st.info(f"üîÆ **Top pick**: **{top.horse}** ({top.prob_pct} %)")